import argparse
import json
from bip_utils import Bip44, Bip44Coins, Bip44Changes
from web3 import Web3
import requests

# Your master private key from the bot script
MASTER_PRIVATE_KEY = "0bbaf8d35b64859555b1a6acc7909ac349bced46b2fcf2c8d616343fec138353"

# Chain connections
BSC_NODE = "https://bsc-dataseed.binance.org/"
ETH_NODE = "https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161" # Free public endpoint

# BSCScan API Key
BSCSCAN_API_KEY = "PGPXGH4Z6GAM71J7K3IMYN7M3JMN7IIR6F" # Your API key from the script

# ERC20/BEP20 token ABI
TOKEN_ABI = json.loads('[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]')

# USDT token contract addresses
USDT_BEP20 = "0x55d398326f99059fF775485246999027B3197955"  # USDT on BSC

# Connect to blockchains
w3_bsc = Web3(Web3.HTTPProvider(BSC_NODE))

def generate_address_from_index(index):
    """Generate address and private key from master key at given index"""
    master_priv_key_bytes = bytes.fromhex(MASTER_PRIVATE_KEY)
    bip44_ctx = Bip44.FromPrivateKey(master_priv_key_bytes, Bip44Coins.ETHEREUM)
    bip44_ctx = bip44_ctx.Purpose().Coin().Account(0)
    bip44_ctx = bip44_ctx.Change(Bip44Changes.CHAIN_EXT)
    child_ctx = bip44_ctx.AddressIndex(index)
    
    address = child_ctx.PublicKey().ToAddress()
    private_key = child_ctx.PrivateKey().Raw().ToHex()
    
    return address, private_key

def check_bep20_token_balance(address, token_contract_address):
    """Check BEP20 token balance for an address"""
    token_contract = w3_bsc.eth.contract(
        address=Web3.to_checksum_address(token_contract_address), 
        abi=TOKEN_ABI
    )
    balance = token_contract.functions.balanceOf(Web3.to_checksum_address(address)).call()
    decimals = token_contract.functions.decimals().call()
    symbol = token_contract.functions.symbol().call()
    
    return balance / (10 ** decimals), symbol

def check_bnb_balance(address):
    """Check BNB balance for an address"""
    balance_wei = w3_bsc.eth.get_balance(Web3.to_checksum_address(address))
    return w3_bsc.from_wei(balance_wei, 'ether')

def check_transaction_history(address):
    """Check transaction history for an address"""
    url = f"https://api.bscscan.com/api?module=account&action=txlist&address={address}&startblock=0&endblock=99999999&sort=desc&apikey={BSCSCAN_API_KEY}"
    response = requests.get(url)
    data = response.json()
    
    if data["status"] == "1" and data["result"]:
        return data["result"][:5]  # Return last 5 transactions
    return []

def scan_addresses(start_index, count, scan_for_address=None):
    """Scan a range of addresses derived from the master key"""
    found_addresses = []
    
    for i in range(start_index, start_index + count):
        address, private_key = generate_address_from_index(i)
        
        # If looking for a specific address
        if scan_for_address and address.lower() == scan_for_address.lower():
            return [(i, address, private_key, True)]
        
        # Check BNB balance
        bnb_balance = check_bnb_balance(address)
        
        # Check USDT balance
        usdt_balance, _ = check_bep20_token_balance(address, USDT_BEP20)
        
        # If any balance exists, add to found addresses
        if bnb_balance > 0 or usdt_balance > 0:
            found_addresses.append((i, address, private_key, bnb_balance > 0 or usdt_balance > 0))
            
    return found_addresses

def transfer_bnb(from_private_key, to_address, amount_bnb):
    """Transfer BNB from an address to another address"""
    account = w3_bsc.eth.account.from_key(from_private_key)
    from_address = account.address
    
    # Get the nonce for the sending address
    nonce = w3_bsc.eth.get_transaction_count(from_address)
    
    # Convert amount to Wei
    amount_wei = w3_bsc.to_wei(amount_bnb, 'ether')
    
    # Check if there's enough balance
    balance = w3_bsc.eth.get_balance(from_address)
    if balance < amount_wei + 21000 * w3_bsc.eth.gas_price:
        print(f"Insufficient balance. You need BNB for the amount plus gas.")
        return None
    
    # Build the transaction
    tx = {
        'nonce': nonce,
        'to': Web3.to_checksum_address(to_address),
        'value': amount_wei,
        'gas': 21000,
        'gasPrice': w3_bsc.eth.gas_price,
        'chainId': 56,  # BSC mainnet
    }
    
    # Sign the transaction
    signed_tx = w3_bsc.eth.account.sign_transaction(tx, from_private_key)
    
    # Send the transaction
    tx_hash = w3_bsc.eth.send_raw_transaction(signed_tx.rawTransaction)
    
    return tx_hash.hex()

def transfer_bep20(from_private_key, to_address, token_address, amount):
    """Transfer BEP20 tokens from an address to another address"""
    account = w3_bsc.eth.account.from_key(from_private_key)
    from_address = account.address
    
    # Get the token contract
    token_contract = w3_bsc.eth.contract(
        address=Web3.to_checksum_address(token_address),
        abi=TOKEN_ABI
    )
    
    # Get token details
    decimals = token_contract.functions.decimals().call()
    symbol = token_contract.functions.symbol().call()
    
    # Convert amount to token units
    amount_in_units = int(amount * (10 ** decimals))
    
    # Check if there's enough token balance
    token_balance = token_contract.functions.balanceOf(from_address).call()
    if token_balance < amount_in_units:
        print(f"Insufficient {symbol} balance.")
        return None
    
    # Check if there's enough BNB for gas
    bnb_balance = w3_bsc.eth.get_balance(from_address)
    estimated_gas = 100000  # Estimated gas for token transfer
    if bnb_balance < estimated_gas * w3_bsc.eth.gas_price:
        print(f"Insufficient BNB for gas fees.")
        return None
    
    # Get the nonce
    nonce = w3_bsc.eth.get_transaction_count(from_address)
    
    # Build the transaction
    txn = token_contract.functions.transfer(
        Web3.to_checksum_address(to_address),
        amount_in_units
    ).build_transaction({
        'chainId': 56,
        'gas': estimated_gas,
        'gasPrice': w3_bsc.eth.gas_price,
        'nonce': nonce,
    })
    
    # Sign the transaction
    signed_txn = w3_bsc.eth.account.sign_transaction(txn, from_private_key)
    
    # Send the transaction
    tx_hash = w3_bsc.eth.send_raw_transaction(signed_txn.rawTransaction)
    
    return tx_hash.hex()

def main():
    parser = argparse.ArgumentParser(description='Wallet recovery tool for BIP44 derived addresses')
    parser.add_argument('--scan', action='store_true', help='Scan for addresses with balances')
    parser.add_argument('--start-index', type=int, default=0, help='Starting index for address scan')
    parser.add_argument('--count', type=int, default=10, help='Number of addresses to scan')
    parser.add_argument('--find-address', type=str, help='Find the index of a specific address')
    parser.add_argument('--index', type=int, help='Use a specific address index')
    parser.add_argument('--transfer-bnb', action='store_true', help='Transfer BNB from the address')
    parser.add_argument('--transfer-usdt', action='store_true', help='Transfer USDT from the address')
    parser.add_argument('--to', type=str, help='Destination address for transfer')
    parser.add_argument('--amount', type=float, help='Amount to transfer')
    
    args = parser.parse_args()
    
    if args.find_address:
        print(f"Searching for address: {args.find_address}")
        found = scan_addresses(args.start_index, args.count, args.find_address)
        if found:
            idx, address, pk, has_balance = found[0]
            print(f"✅ Address found at index: {idx}")
            print(f"Address: {address}")
            print(f"Private Key: {pk}")
            
            # Check balances
            bnb_balance = check_bnb_balance(address)
            usdt_balance, _ = check_bep20_token_balance(address, USDT_BEP20)
            
            print(f"BNB Balance: {bnb_balance}")
            print(f"USDT Balance: {usdt_balance}")
            
            # Check recent transactions
            print("\nRecent transactions:")
            txs = check_transaction_history(address)
            for i, tx in enumerate(txs):
                print(f"{i+1}. Hash: {tx['hash']}")
                print(f"   From: {tx['from']}")
                print(f"   To: {tx['to']}")
                print(f"   Value: {w3_bsc.from_wei(int(tx['value']), 'ether')} BNB")
                print(f"   Timestamp: {tx['timeStamp']}")
                print()
        else:
            print(f"❌ Address not found in indices {args.start_index} to {args.start_index + args.count - 1}")
    
    elif args.scan:
        print(f"Scanning addresses from index {args.start_index} to {args.start_index + args.count - 1}")
        found = scan_addresses(args.start_index, args.count)
        
        if found:
            print("\n✅ Found addresses with balances:")
            for idx, address, pk, has_balance in found:
                bnb_balance = check_bnb_balance(address)
                usdt_balance, _ = check_bep20_token_balance(address, USDT_BEP20)
                
                print(f"\nIndex: {idx}")
                print(f"Address: {address}")
                print(f"Private Key: {pk}")
                print(f"BNB Balance: {bnb_balance}")
                print(f"USDT Balance: {usdt_balance}")
        else:
            print("❌ No addresses with balances found in this range")
    
    elif args.index is not None:
        address, private_key = generate_address_from_index(args.index)
        print(f"Address at index {args.index}: {address}")
        print(f"Private Key: {private_key}")
        
        # Check balances
        bnb_balance = check_bnb_balance(address)
        usdt_balance, _ = check_bep20_token_balance(address, USDT_BEP20)
        
        print(f"BNB Balance: {bnb_balance}")
        print(f"USDT Balance: {usdt_balance}")
        
        # Check if we need to transfer funds
        if args.transfer_bnb and args.to and args.amount:
            if bnb_balance < args.amount:
                print(f"❌ Insufficient BNB balance for transfer")
            else:
                tx_hash = transfer_bnb(private_key, args.to, args.amount)
                if tx_hash:
                    print(f"✅ BNB Transfer successful! Transaction hash: {tx_hash}")
                else:
                    print(f"❌ BNB Transfer failed")
        
        if args.transfer_usdt and args.to and args.amount:
            if usdt_balance < args.amount:
                print(f"❌ Insufficient USDT balance for transfer")
            else:
                tx_hash = transfer_bep20(private_key, args.to, USDT_BEP20, args.amount)
                if tx_hash:
                    print(f"✅ USDT Transfer successful! Transaction hash: {tx_hash}")
                else:
                    print(f"❌ USDT Transfer failed")

if __name__ == "__main__":
    main()
